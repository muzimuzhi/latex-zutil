\input{regression-test}
\documentclass{minimal}

\usepackage{zutil}

\ExplSyntaxOn

\debug_on:n { check-declarations , deprecation , log-functions }

\START

\TESTEXP{\zutil_cs_if_function:NTF}{
  % functions: {defined, undefined} * {has sig, no sig}
  \zutil_cs_if_function:NTF \zutil_set:n       \PASSED \FAILED
  \zutil_cs_if_function:NTF \scan_stop:        \PASSED \FAILED
  \zutil_cs_if_function:NTF \zutil_undefined:N \PASSED \FAILED
  \zutil_cs_if_function:NTF \zutil_undefined:  \PASSED \FAILED
  % non-functions: {defined, undefined}
  \zutil_cs_if_function:NTF \l_tmpa_tl         \FAILED \PASSED
  \zutil_cs_if_function:NTF \l_undefined_tl    \FAILED \PASSED
}

\tl_map_inline:nn
  {
    \zutil_cs_function_name:N
    \zutil_cs_function_signature:N
    \zutil_cs_base_function:N
  }
  {
    \TESTEXP{#1}{
      % functions: {defined, undefined} * {has sig, no sig}
      [ #1 \zutil_set:n ] \NEWLINE
      [ #1 \scan_stop: ] \NEWLINE
      [ #1 \zutil_undefined:N ] \NEWLINE
      [ #1 \zutil_undefined: ] \NEWLINE
      % non-functions: {defined, undefined}
      [ #1 \l_tmpa_tl ] \NEWLINE
      [ #1 \l_undefined_tl ]
    }
  }

\TESTEXP{\zutil_cs_base_function:N variants}{
  % matrix: {defined, undefined} * {single argument, multiple arguments}
  [ \zutil_cs_base_function:N \tl_new:c ] \NEWLINE
  [ \zutil_cs_base_function:N \tl_set:ce ] \NEWLINE
  [ \zutil_cs_base_function:N \zutil_undefined:V ] \NEWLINE
  [ \zutil_cs_base_function:N \zutil_undefined:oVvfx ] \NEWLINE
  % invalid argument specifiers
  [ \zutil_cs_base_function:N \exp_after:wN ] \NEWLINE
  [ \zutil_cs_base_function:N \tex_undefined:D ] \NEWLINE
}

\TEST{\zutil_cs_if_defined:NTF}{
  \zutil_cs_if_defined:NTF \zutil_set:n     \PASSED \FAILED
  \zutil_cs_if_defined:NTF \scan_stop:      \PASSED \FAILED
  \zutil_cs_if_defined:NTF \tex_undefined:D \FAILED \PASSED
}

\TEST{\zutil_cs_if_defined:cTF}{
  \zutil_cs_if_defined:cTF { zutil_set:n }      \PASSED \FAILED
  \zutil_cs_if_defined:cTF { scan_stop: }       \PASSED \FAILED
  \zutil_cs_if_defined:cTF { tex_undefined:D }  \FAILED \PASSED
}

\TEST{\zutil_cs_generate_variant:N}{
  \zutil_cs_generate_variant:N \tl_new:N
  \zutil_cs_generate_variant:N \tl_new:c
  \zutil_cs_generate_variant:N \zutil_set:V
  \zutil_cs_generate_variant:N \cs_new:Npo
}

\TEST{\zutil_cs_generate_variant:N avoid~defining~base~form}{
  \debug_off:n { check-declarations }
  \zutil_cs_generate_variant:N \zutil_undefined:x
}

\TEST{\zutil_cs_generate_variant:N invalid~specifier}{
  \zutil_cs_generate_variant:N \exp_after:wc
  \zutil_cs_generate_variant:N \zutil_set:X
}

\OMIT
\cs_new_protected:cpn { ~ myfun_name:n } #1 { }
\cs_new_protected:cpn { ~ \c_space_tl myfun_name:nn } #1#2 { }
\TIMO

\TEST{\zutil_cs_generate_variant:N retains~leading~spaces}{
  \debug_on:n { log-functions }
  \exp_args:Nc \zutil_cs_generate_variant:N { ~ myfun_name:o }
  \exp_args:Nc \zutil_cs_generate_variant:N { ~ \c_space_tl myfun_name:ne }
}

\TEST{\zutil_cs_generate_variant:n}{
  \debug_on:n { log-functions }
  \zutil_cs_generate_variant:n { \zutil_set:v, \zutil_set:e }
}

\OMIT
\msg_new:nnnn { test } { test } { text } { more~text }
\cs_gset:Npn \test:w
  {
    \OMIT
    \test_suspend_error_count:
    \benchmark_once:n {
      \msg_error:nn { test } { test }
      \msg_expandable_error:nn { test } { test }
      \msg_warning:nn { test } { test }
    }
    \test_resume_error_count:
    \TIMO
  }
\TIMO

\TEST{\zutil_msg_suspend_debug:}{
  % inaccurate on Windows
  \sys_if_platform_windows:TF { \PASSED }
    {
      \zutil_msg_suspend_debug:
      \test:w
      \fp_set_eq:NN \l_tmpa_fp \g_benchmark_time_fp
      \zutil_msg_resume_debug:
      \test:w

      \fp_compare:nNnTF \l_tmpa_fp < \g_benchmark_time_fp
        { \PASSED }
        {
          \fp_show:N \l_tmpa_fp
          \fp_show:N \g_benchmark_time_fp
          \FAILED
        }
    }
}

\TEST{\zutil_prg_new_conditional_tl_if_in:Nnn}{
  \debug_on:n { log-functions }
  \zutil_prg_new_conditional_tl_if_in:Nnn \test_if_colon_in:n {:} { p, TF }
  \test_if_colon_in:nTF { ab } { \FAILED } { \PASSED }
  \bool_if:nTF { \test_if_colon_in_p:n { a:b } } { \PASSED } { \FAILED }

  \zutil_prg_new_conditional_tl_if_in:Non \test_if_str_colon_in:n
    { \c_colon_str } { T, F }
  \test_if_str_colon_in:nF { ab } { \PASSED }
  \zutil_cs_generate_variant:N \test_if_str_colon_in:eT
  \test_if_str_colon_in:eT { a \c_colon_str b } { \PASSED }
}

% based on l3kernel test for \seq_set_split_keep_spaces:Nnn,
% from l3kernel/testfiles/m3seq004.lvt
\TEST{\zutil_seq_set_split_keep_braces:Nnn}{
  \zutil_seq_set_split_keep_braces:Nnn \l_tmpa_seq { | } { }
  \seq_log:N \l_tmpa_seq
  \zutil_seq_set_split_keep_braces:Nnn \l_tmpa_seq { , } { a, }
  \seq_log:N \l_tmpa_seq
  \zutil_seq_set_split_keep_braces:Nnn \l_tmpa_seq { , } { a~,~b }
  \seq_log:N \l_tmpa_seq
  \zutil_seq_set_split_keep_braces:Nnn \l_tmpa_seq { | }
    { ~ a | b | ~c~ | {|} | ~{~|{}~} | d ~ | {e}e | \ERROR | }
  \seq_log:N \l_tmpa_seq
  \zutil_seq_set_split_keep_braces:Nnn \l_tmpa_seq { ~ }
    { Hello,~world,~my~name~is~LaTeX! }
  \seq_log:N \l_tmpa_seq
}

\TEST{gset}{
  \group_begin:
  \zutil_seq_gset_split_keep_braces:Nnn \g_tmpa_seq { | }
    { ~ a | b | ~c~ | {|} | ~{~|{}~} | d ~ | {e}e | \ERROR | }
  \group_end:
  \seq_log:N \g_tmpa_seq
}

\seq_gclear:N \g_tmpa_seq

\TEST{Empty~delimiter}{
  \zutil_seq_set_split_keep_braces:Nnn \l_tmpa_seq { } { abcdefghijklm }
  \seq_log:N \l_tmpa_seq
  \zutil_seq_gset_split_keep_braces:Nnn \g_tmpa_seq { } { abcdefghijklm }
  \seq_log:N \g_tmpa_seq
}

\ExplSyntaxOff

\END
