\input{regression-test}
\documentclass{minimal}

\usepackage{zutil}

\ExplSyntaxOn

\debug_on:n { check-declarations , deprecation }

\START

\TEST{\zutil_cs_if_defined:NTF}{
  \zutil_cs_if_defined:NTF \zutil_set:n     \TRUE \ERROR
  \zutil_cs_if_defined:NTF \scan_stop:      \TRUE \ERROR
  \zutil_cs_if_defined:NTF \tex_undefined:D \ERROR \TRUE
}

\TEST{\zutil_cs_if_defined:cTF}{
  \zutil_cs_if_defined:cTF { zutil_set:n }      \TRUE \ERROR
  \zutil_cs_if_defined:cTF { scan_stop: }       \TRUE \ERROR
  \zutil_cs_if_defined:cTF { tex_undefined:D }  \ERROR \TRUE
}

\TEST{\zutil_cs_ensure_variant:N}{
  \zutil_cs_ensure_variant:N \tl_new:N
  \zutil_cs_ensure_variant:N \tl_new:c
  \TYPE { [before]~\cs_meaning:N \zutil_set:V }
  \zutil_cs_ensure_variant:N \zutil_set:V
  \TYPE { [after]~\cs_meaning:N \zutil_set:V }
  \TYPE { [before]~\cs_meaning:N \cs_new:Npo }
  \zutil_cs_ensure_variant:N \cs_new:Npo
  \TYPE { [after]~\cs_meaning:N \cs_new:Npo }
}

\TEST{\zutil_cs_ensure_variant:N invalid~specifier}{
  \zutil_cs_ensure_variant:N \exp_after:wc
  \zutil_cs_ensure_variant:N \zutil_set:X
}

\OMIT
% \char_generate:nn {33} {10} => character "!" with catcode 10
% \char_generate:nn {65} {10} => character "A" with catcode 10
\tl_set:Ne \l_tmpa_tl { \char_generate:nn {33} {10} }
\tl_set:Ne \l_tmpb_tl { \char_generate:nn {65} {10} }

\cs_set_protected:Npn \test:w #1
  {
    % based on \tl_trim_spaces:n tests in l3kernel test file m3tl004.lvt
    \TYPE { >> #1 { ~ a b ~ c ~ } << }
    \TYPE { >> #1 { ~ \use:n ~ { a b ~ c  ~ } ~ } << }
    % new test cases
    % no brace stripping
    \TYPE { >> #1 { ~ { a } ~ } << }
    \TYPE { >> #1 { ~ { ~ a ~ } ~ } << }
    % no trimming of implicit spaces
    \TYPE { >> \exp_args:Ne #1 { \c_space_token a \c_space_token } << }
    \TYPE { >> \exp_args:Ne #1
      { ~ \c_space_token \c_space_tl a ~ \c_space_token \c_space_tl } << }
    % trim explicit(32,10) spaces only
    \TYPE { >> \exp_args:Ne #1 { \l_tmpa_tl a \l_tmpb_tl } << }
    \TYPE { >> \exp_args:Ne #1
      { ~ \l_tmpa_tl \c_space_tl a ~ \l_tmpb_tl \c_space_tl } << }
    % trim all explicit spaces
    \TYPE { >> #1 { ~ \c_space_tl a ~ \c_space_tl } << }
    \TYPE { >> \exp_args:Ne #1 { ~ \c_space_tl a ~ \c_space_tl } << }
    \TYPE { >> \exp_args:Ne #1 { ~ \c_space_tl {a} ~ \c_space_tl } << }
    % returned within \exp_not:n
    \TYPE { >> \tl_to_str:e { #1 { ~ \use:n ~ { \ERROR } ~ } } << }
  }
\TIMO

\clist_map_inline:nn
  {
    \tl_trim_spaces:n
  , \zutil_tl_trim_leading_spaces:n
  , \zutil_tl_trim_trailing_spaces:n
  }
  {
    \TEST{#1}{
      \test:w #1
    }
  }

\OMIT
\cs_set_protected:Npn \test_noexp:w #1
  { \TYPE { >> \exp_not:n {#1} << } }
\cs_set_protected:Npn \test_exp:w #1
  { \TYPE { >> #1 << } }
\TIMO

\clist_map_inline:nn
  {
    \tl_trim_spaces_apply:nN
  , \zutil_tl_trim_leading_spaces_apply:nN
  , \zutil_tl_trim_trailing_spaces_apply:nN
  }
  {
    \TEST{#1}{
      #1 { ~ \use:n ~ { ~ a b ~ c  ~ } ~ } \test_noexp:w
      #1 { ~ \use:n ~ { ~ a b ~ c  ~ } ~ } \test_exp:w
    }
  }

% based on l3kernel test for \seq_set_split_keep_spaces:Nnn,
% from l3kernel/testfiles/m3seq004.lvt
\TEST{\zutil_seq_set_split_keep_braces:Nnn}{
  \zutil_seq_set_split_keep_braces:Nnn \l_tmpa_seq { | } { }
  \seq_log:N \l_tmpa_seq
  \zutil_seq_set_split_keep_braces:Nnn \l_tmpa_seq { , } { a, }
  \seq_log:N \l_tmpa_seq
  \zutil_seq_set_split_keep_braces:Nnn \l_tmpa_seq { , } { a~,~b }
  \seq_log:N \l_tmpa_seq
  \zutil_seq_set_split_keep_braces:Nnn \l_tmpa_seq { | }
    { ~ a | b | ~c~ | {|} | ~{~|{}~} | d ~ | {e}e | \ERROR | }
  \seq_log:N \l_tmpa_seq
  \zutil_seq_set_split_keep_braces:Nnn \l_tmpa_seq { ~ }
    { Hello,~world,~my~name~is~LaTeX! }
  \seq_log:N \l_tmpa_seq
}

\TEST{gset}{
  \group_begin:
  \zutil_seq_gset_split_keep_braces:Nnn \g_tmpa_seq { | }
    { ~ a | b | ~c~ | {|} | ~{~|{}~} | d ~ | {e}e | \ERROR | }
  \group_end:
  \seq_log:N \g_tmpa_seq
}

\seq_gclear:N \g_tmpa_seq

\TEST{Empty~delimiter}{
  \zutil_seq_set_split_keep_braces:Nnn \l_tmpa_seq { } { abcdefghijklm }
  \seq_log:N \l_tmpa_seq
  \zutil_seq_gset_split_keep_braces:Nnn \g_tmpa_seq { } { abcdefghijklm }
  \seq_log:N \g_tmpa_seq
}

\ExplSyntaxOff

\END
