\input{regression-test}
\documentclass{minimal}

\usepackage{zutil}

\ExplSyntaxOn

\debug_on:n { check-declarations , deprecation }

\START

\TEST{\zutil_cs_if_defined:NTF}{
  \zutil_cs_if_defined:NTF \zutil_set:n     \PASSED \FAILED
  \zutil_cs_if_defined:NTF \scan_stop:      \PASSED \FAILED
  \zutil_cs_if_defined:NTF \tex_undefined:D \FAILED \PASSED
}

\TEST{\zutil_cs_if_defined:cTF}{
  \zutil_cs_if_defined:cTF { zutil_set:n }      \PASSED \FAILED
  \zutil_cs_if_defined:cTF { scan_stop: }       \PASSED \FAILED
  \zutil_cs_if_defined:cTF { tex_undefined:D }  \FAILED \PASSED
}

\TEST{\zutil_cs_generate_variant:N}{
  \zutil_cs_generate_variant:N \tl_new:N
  \zutil_cs_generate_variant:N \tl_new:c
  \TYPE { [before]~\cs_meaning:N \zutil_set:V }
  \zutil_cs_generate_variant:N \zutil_set:V
  \TYPE { [after]~\cs_meaning:N \zutil_set:V }
  \TYPE { [before]~\cs_meaning:N \cs_new:Npo }
  \zutil_cs_generate_variant:N \cs_new:Npo
  \TYPE { [after]~\cs_meaning:N \cs_new:Npo }
}

\TEST{\zutil_cs_generate_variant:N invalid~specifier}{
  \zutil_cs_generate_variant:N \exp_after:wc
  \zutil_cs_generate_variant:N \zutil_set:X
}

\TEST{\zutil_cs_generate_variant:n}{
  \TYPE { [before]~\cs_meaning:N \zutil_set:v }
  \TYPE { [before]~\cs_meaning:N \zutil_set:e }
  \zutil_cs_generate_variant:n { \zutil_set:v, \zutil_set:e }
  \TYPE { [after]~\cs_meaning:N \zutil_set:v }
  \TYPE { [after]~\cs_meaning:N \zutil_set:e }
}

\TEST{\zutil_prg_new_conditional_tl_if_in:Nnn}{
  \zutil_prg_new_conditional_tl_if_in:Nnn \test_if_colon_in:n {:} { p, TF }
  \test_if_colon_in:nTF { ab } { \FAILED } { \PASSED }
  \bool_if:nTF { \test_if_colon_in_p:n { a:b } } { \PASSED } { \FAILED }

  \zutil_prg_new_conditional_tl_if_in:Non \test_if_str_colon_in:n
    { \c_colon_str } { T, F }
  \test_if_str_colon_in:nF { ab } { \PASSED }
  \zutil_cs_generate_variant:N \test_if_str_colon_in:eT
  \test_if_str_colon_in:eT { a \c_colon_str b } { \PASSED }
}

% based on l3kernel test for \seq_set_split_keep_spaces:Nnn,
% from l3kernel/testfiles/m3seq004.lvt
\TEST{\zutil_seq_set_split_keep_braces:Nnn}{
  \zutil_seq_set_split_keep_braces:Nnn \l_tmpa_seq { | } { }
  \seq_log:N \l_tmpa_seq
  \zutil_seq_set_split_keep_braces:Nnn \l_tmpa_seq { , } { a, }
  \seq_log:N \l_tmpa_seq
  \zutil_seq_set_split_keep_braces:Nnn \l_tmpa_seq { , } { a~,~b }
  \seq_log:N \l_tmpa_seq
  \zutil_seq_set_split_keep_braces:Nnn \l_tmpa_seq { | }
    { ~ a | b | ~c~ | {|} | ~{~|{}~} | d ~ | {e}e | \ERROR | }
  \seq_log:N \l_tmpa_seq
  \zutil_seq_set_split_keep_braces:Nnn \l_tmpa_seq { ~ }
    { Hello,~world,~my~name~is~LaTeX! }
  \seq_log:N \l_tmpa_seq
}

\TEST{gset}{
  \group_begin:
  \zutil_seq_gset_split_keep_braces:Nnn \g_tmpa_seq { | }
    { ~ a | b | ~c~ | {|} | ~{~|{}~} | d ~ | {e}e | \ERROR | }
  \group_end:
  \seq_log:N \g_tmpa_seq
}

\seq_gclear:N \g_tmpa_seq

\TEST{Empty~delimiter}{
  \zutil_seq_set_split_keep_braces:Nnn \l_tmpa_seq { } { abcdefghijklm }
  \seq_log:N \l_tmpa_seq
  \zutil_seq_gset_split_keep_braces:Nnn \g_tmpa_seq { } { abcdefghijklm }
  \seq_log:N \g_tmpa_seq
}

\ExplSyntaxOff

\END
