This is a generated file for the l3build validation system.
Don't change this file in any respect.
============================================================
TEST: \zutil_cs_if_function:NTF 
============================================================
[test] 6 check(s) passed.
============================================================
============================================================
TEST: \zutil_cs_function_name:N 
============================================================
[zutil_set]
[scan_stop]
[zutil_undefined]
[zutil_undefined]
[\q_no_value ]
[\q_no_value ]
============================================================
============================================================
TEST: \zutil_cs_function_signature:N 
============================================================
[n]
[]
[N]
[]
[\q_no_value ]
[\q_no_value ]
============================================================
============================================================
TEST: \zutil_cs_base_function:N 
============================================================
[\zutil_set:n ]
[\scan_stop: ]
[\zutil_undefined:N ]
[\zutil_undefined: ]
[\q_no_value ]
[\q_no_value ]
============================================================
============================================================
TEST: \zutil_cs_base_function:N variants
============================================================
! Use of \??? doesn't match its definition.
<argument> \???  
                 ! Package zutil Error: Invalid argument specifier 'w'.
l. ...}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.
! Use of \??? doesn't match its definition.
<argument> \???  
                 ! Package zutil Error: Invalid argument specifier 'D'.
l. ...}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.
[\tl_new:N ]
[\tl_set:Nn ]
[\zutil_undefined:n ]
[\zutil_undefined:nnnnn ]
[\exp_after:wN ]
[\tex_undefined:D ]
[test] 2 error(s) encountered in this test.
============================================================
============================================================
TEST: \zutil_cs_if_defined:NTF 
============================================================
[test] 3 check(s) passed.
============================================================
============================================================
TEST: \zutil_cs_if_defined:cTF 
============================================================
[test] 3 check(s) passed.
============================================================
============================================================
TEST: \zutil_cs_generate_variant:N 
============================================================
Defining \zutil_set:V on line ...
Defining \exp_args:NNpo on line ...
Defining \cs_new:Npo on line ...
============================================================
============================================================
TEST: \zutil_cs_generate_variant:N avoid defining base form
============================================================
Defining \zutil_undefined:x on line ...
============================================================
============================================================
TEST: \zutil_cs_generate_variant:N invalid specifier
============================================================
! Use of \??? doesn't match its definition.
<argument> \???  
                 ! Package zutil Error: Invalid argument specifier 'w'.
l. ...}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.
Defining \exp_after:wc on line ...
! LaTeX Error: Variant form 'wc' deprecated for base form '\exp_after:wN'. One should not change an argument from type 'w' to type 'w': base form is already a variant.
Type <return> to continue.
 ...                                              
l. ...}
LaTeX does not know anything more about this error, sorry.
Try typing <return> to proceed.
If that doesn't work, type X <return> to quit.
! Use of \??? doesn't match its definition.
<argument> \???  
                 ! Package zutil Error: Invalid argument specifier 'X'.
l. ...}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.
[test] 3 error(s) encountered in this test.
============================================================
============================================================
TEST: \zutil_cs_generate_variant:N retains leading spaces
============================================================
Defining \ myfun_name:o on line ...
Defining \  myfun_name:ne on line ...
============================================================
============================================================
TEST: \zutil_cs_generate_variant:n 
============================================================
Defining \zutil_set:v on line ...
Defining \zutil_set:e on line ...
============================================================
============================================================
TEST: \zutil_msg_suspend_debug: 
============================================================
[test] 1 check(s) passed.
============================================================
============================================================
TEST: \zutil_prg_new_conditional_tl_if_in:Nnn 
============================================================
Defining \test_if_colon_in_aux:w on line ...
Defining \test_if_colon_in_p:n on line ...
Defining \test_if_colon_in:nTF on line ...
Defining \test_if_str_colon_in_aux:w on line ...
Defining \test_if_str_colon_in:nT on line ...
Defining \test_if_str_colon_in:nF on line ...
Defining \test_if_str_colon_in:eT on line ...
[test] 4 check(s) passed.
============================================================
============================================================
TEST: \zutil_seq_set_split_keep_braces:Nnn 
============================================================
The sequence \l_tmpa_seq contains the items (without outer braces):
>  {}.
The sequence \l_tmpa_seq contains the items (without outer braces):
>  {a}
>  {}.
The sequence \l_tmpa_seq contains the items (without outer braces):
>  {a}
>  {b}.
The sequence \l_tmpa_seq contains the items (without outer braces):
>  {a}
>  {b}
>  {c}
>  {{|}}
>  {{ |{} }}
>  {d}
>  {{e}e}
>  {\ERROR }
>  {}.
The sequence \l_tmpa_seq contains the items (without outer braces):
>  {Hello,}
>  {world,}
>  {my}
>  {name}
>  {is}
>  {LaTeX!}.
============================================================
============================================================
TEST: gset
============================================================
The sequence \g_tmpa_seq contains the items (without outer braces):
>  {a}
>  {b}
>  {c}
>  {{|}}
>  {{ |{} }}
>  {d}
>  {{e}e}
>  {\ERROR }
>  {}.
============================================================
============================================================
TEST: Empty delimiter
============================================================
! Package zutil Error: Empty delimiter is not supported in \zutil_seq_set_split_keep_braces:Nnn .
(zutil)                The existing definition of '\l_tmpa_seq ' will not be altered.
The sequence \l_tmpa_seq is empty
> .
! Package zutil Error: Empty delimiter is not supported in \zutil_seq_gset_split_keep_braces:Nnn .
(zutil)                The existing definition of '\g_tmpa_seq ' will not be altered.
The sequence \g_tmpa_seq is empty
> .
[test] 2 error(s) encountered in this test.
============================================================
***************
[test] 7 error(s) encountered.
