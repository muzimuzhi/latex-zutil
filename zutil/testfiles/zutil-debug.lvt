\input{zutil-regression-test}
\documentclass{minimal}

\usepackage[presets=none]{zutil}

\ExplSyntaxOn

\zutil_load_module:n { debug }

\debug_on:n { check-declarations , deprecation }

\START

\TEST{labels}{
  % "label" key
  \zutil_debug:nn { label=label } { text }
  \zutil_debug:nn { label=label, label=l2, label=l3 } { text }
  % unknown key as label
  \zutil_debug:nn { Label } { text }
  \zutil_debug:nn { Label, l2, l3 } { text }
  % expansion on labels
  \zutil_debug:nn { label=\c_novalue_tl, \c_novalue_tl, e=\c_novalue_tl} {text}
}

\TEST{\zutil_debug:n,~ \zutil_debug:N}{
  \zutil_debug:n { \c_novalue_tl }
  \zutil_debug:e { \c_novalue_tl }
  \zutil_debug:N \c_novalue_tl
  \zutil_debug:c { my_novalue_tl }
}

% \TEST is run in a group
\TEST{reset-labels}{
  \zutil_debug:nn { Label } { text }
  \zutil_debug_set:n { label=config, l2 }
  \zutil_debug:nn { reset-labels, ln } { text }
  \zutil_debug_set:n { reset-labels }
  \zutil_debug:nn { Label } { text }
}

\TEST{negative~level~raises~error}{
  \zutil_debug:nn { - } { lv0 }
}

\TEST{level~options}{
  \zutil_debug:nn { beg } { lv0 }

  \zutil_debug_set:n { ... }
  \zutil_debug:nn {    } { lv0 }
  \zutil_debug:nn { +  } { lv1 }
  \zutil_debug:nn {    } { lv1 }
  \zutil_debug:nn { +  } { lv2 }
  \zutil_debug:nn {    } { lv2 }
  \zutil_debug:nn { +. } { lv3 }

  \zutil_debug_set:n { reset-level }
  \zutil_debug:nn {    } { lv0 }
  \zutil_debug_set:n { +, + }

  \zutil_debug:nn { +. } { lv3 }
  \zutil_debug:nn {    } { lv2 }
  \zutil_debug:nn {    } { lv2 }
  \zutil_debug:nn { -  } { lv1 }
  \zutil_debug:nn {    } { lv1 }
  \zutil_debug:nn { -  } { lv0 }

  \zutil_debug_set:n { reset-labels }
  \zutil_debug:nn { end } { lv0 }
}

\TEST{the~"if"~option}{
  \zutil_debug:nn { if=true } { used }
  \zutil_debug:nn { if=false } { \ERROR }
  \zutil_debug:nn { if=2>3 } { \ERROR }
}

\TEST{\zutil_debug:nn~ignores~config~options}{
  \zutil_debug:nn { Label, reset-labels } { text }
  \zutil_debug:nn { +, reset-level } { text }
}

\OMIT
\cs_set:Npn \tests:w #1
  {
    #1 { true  } \zutil_debug:nn { } { used }
    #1 { true  } \zutil_debug:n      { used }

    #1 { false } \zutil_debug:nn { } { \ERROR }
    #1 { 0 > 1 } \zutil_debug:nn { } { \ERROR }
    % arg-forms other than "nn"
    \clist_map_inline:nn
      {
        ne, en, ee
      , nN, nc, eN, ec
      }
      {
        \exp_args:Nnc
        #1 { false }
        { zutil_debug: ##1 } { ##1 } \ERROR
      }
    \clist_map_inline:nn
      {
        n, e
      , N, c
      }
      {
        \exp_args:Nnc
        #1 { false }
        { zutil_debug: ##1 } \ERROR
      }
  }
\TIMO

\TEST{\zutil_debug_if:n}{
  \tests:w \zutil_debug_if:n
}

\TEST{\zutil_debug_safe_if:n}{
  \tests:w \zutil_debug_safe_if:n
}

\OMIT
\begin{document}
\TIMO

\TEST{\zutil_debug_safe_if:n,~safety}{
  \hbox_set:Nn \l_tmpa_box
    {
      \int_use:N \tex_currentgrouplevel:D
      \zutil_debug_safe_if:n { true } a
      \zutil_debug_safe_if:n { true }
        { \int_use:N \tex_currentgrouplevel:D }
      \zutil_debug_safe_if:n { true } $x^n$
      \zutil_debug_safe_if:n { true } \scan_stop:
      \zutil_debug_safe_if:n { true } \use_none:n { \ERROR }
    }
  \box_show:N \l_tmpa_box
}

\TEST{\ZutilDebug and~\ZutilDebugCmd}{
  \ZutilDebug[label=L1]{text}[L2, e=p\arabic{page}]
  \ZutilDebug[L, if=false]{\ERROR}
  \ZutilDebug{\ERROR}[L, if=false]

  \ZutilDebugCmd\ERROR[L]
  \ZutilDebugCmd\IGNORED[L, if=\value{page}>3]
  \ExpandArgs{c}\ZutilDebugCmd{ZutilDebug~code}
    [+., L, if=true]
}

\ExplSyntaxOff

\END
