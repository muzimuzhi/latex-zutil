\ProvidesExplPackage {zutil} {2024-11-15} {0.1}
  {Z's utilities, l3seq part}

%%
%% l3seq extras
%%
\msg_new:nnn { zutil } { seq/empty-delimiter }
  {
    Empty~delimiter~is~not~supported~in~#1. \\
    The~existing~definition~of~'#2'~will~not~be~altered.
  }

\cs_new_protected:Npn \zutil_seq_set_split_keep_braces:Nnn #1
  {
    \__zutil_seq_set_split:NNNNnn
      \__kernel_tl_set:Nx \__zutil_seq_trim_spaces:n #1
      \zutil_seq_set_split_keep_braces:Nnn
  }
\cs_generate_variant:Nn \zutil_seq_set_split_keep_braces:Nnn { NnV }

\cs_new_protected:Npn \zutil_seq_gset_split_keep_braces:Nnn #1
  {
    \__zutil_seq_set_split:NNNNnn
      \__kernel_tl_gset:Nx \__zutil_seq_trim_spaces:n #1
      \zutil_seq_gset_split_keep_braces:Nnn
  }
\cs_generate_variant:Nn \zutil_seq_gset_split_keep_braces:Nnn { NnV }

% This implementation is quicker than adding another \prg_do_nothing:
% and \exp_args:No trick to \__zutil_seq_set_split:Nw and
% \__zutil_seq_set_split:w, resp.
\cs_new:Npn \__zutil_seq_trim_spaces:n #1 { { \tl_trim_spaces:n {#1} } }

% Compared to \__seq_set_split:NNNnn, a forth N-arg is added which
% holds the user function, i.e. \zutil_seq_set_split_keep_braces:Nnn,
% for use in error message.
%
% l3seq internals \__seq_set_split:Nw and \l__seq_internal_a_tl, along
% with the undefined delimiter \__seq_set_split_end:, are used.
\cs_new_protected:Npn \__zutil_seq_set_split:NNNNnn #1#2#3#4#5#6
  {
    \tl_if_empty:nTF {#5}
      {
        \msg_error:nnnn { zutil } { seq/empty-delimiter } {#4} {#3}
      }
      {
        \tl_set:Nn \l__seq_internal_a_tl
          {
            \__seq_set_split:Nw #2 \prg_do_nothing:
            #6
            \__seq_set_split_end:
          }
        \tl_replace_all:Nnn \l__seq_internal_a_tl {#5}
          {
            \__seq_set_split_end:
            \__seq_set_split:Nw #2 \prg_do_nothing:
          }
        \__kernel_tl_set:Nx \l__seq_internal_a_tl { \l__seq_internal_a_tl }
        #1 #3 { \s__seq \l__seq_internal_a_tl }
      }
  }

%%
%% l3file extras, for debugging
%%

% #1 = text
\cs_new_protected:Npn \zutil_debug:n #1
  { \iow_term:e { !~debug ~ \exp_not:n {#1}. \iow_newline: } }
\cs_generate_variant:Nn \zutil_debug:n { e }

\cs_new_protected:Npn \zutil_debug:N #1
  { \zutil_debug:e { \cs_replacement_spec:N #1 } }
\cs_new_protected:Npn \zutil_debug:c #1
  { \zutil_debug:e { \cs_replacement_spec:c {#1} } }

% log a labeled text
% #1 = label, #2 text
\cs_new_protected:Npn \zutil_debug:nn #1#2
  { \zutil_debug:n { [#1]~ #2 } }
\cs_generate_variant:Nn \zutil_debug:nn { ne , en , ee }

\cs_new_protected:Npn \zutil_debug:nN #1#2
  { \zutil_debug:ne {#1} { \cs_replacement_spec:N #2 } }
\cs_generate_variant:Nn \zutil_debug:nN { e }
\cs_new_protected:Npn \zutil_debug:nc #1#2
  { \zutil_debug:ne {#1} { \cs_replacement_spec:c {#2} } }
\cs_generate_variant:Nn \zutil_debug:nc { e }

% log text if some condition meets
% #1 = text, #2 = bool expr
\cs_new_protected:Npn \zutil_debug_if:nn
  { \__zutil_debug_if:Nnn \zutil_debug:n }
\cs_generate_variant:Nn \zutil_debug_if:nn { e }
\cs_new_protected:Npn \zutil_debug_if:Nn
  { \__zutil_debug_if:Nnn \zutil_debug:N }
\cs_new_protected:Npn \zutil_debug_if:cn
  { \__zutil_debug_if:Nnn \zutil_debug:c }

% example use
%   \__zutil_debug_if:Nnn \zutil_debug:n {text} {<bool expr>}
\cs_new_protected:Npn \__zutil_debug_if:Nnn #1#2#3
  { \bool_if:nT {#3} { #1 {#2} } }

% log labeled text if some condition meets
\cs_new_protected:Npn \zutil_debug_if:nnn
  { \__zutil_debug_if:Nnnn \zutil_debug:nn }
\cs_new_protected:Npn \zutil_debug_if:nNn
  { \__zutil_debug_if:Nnnn \zutil_debug:nN }
\cs_new_protected:Npn \zutil_debug_if:ncn
  { \__zutil_debug_if:Nnnn \zutil_debug:nc }
\cs_generate_variant:Nn \zutil_debug_if:nnn { ne , en , ee }
\cs_generate_variant:Nn \zutil_debug_if:nNn { e }
\cs_generate_variant:Nn \zutil_debug_if:ncn { e }

% example use
%   \__zutil_debug_if:Nnnn \zutil_debug:nn {label} {text} {<bool expr>}
\cs_new_protected:Npn \__zutil_debug_if:Nnnn #1#2#3#4
  { \bool_if:nT {#4} { #1 {#2} {#3} } }

% LaTeX2e versions
\NewDocumentCommand \ZutilDebug { o m }
  {
    \IfValueTF {#1}
      { \zutil_debug:nn {#1} {#2} }
      { \zutil_debug:n {#2} }
  }

\NewDocumentCommand \ZutilDebugCmd { o m }
  {
    \IfValueTF {#1}
      { \zutil_debug:nN {#1} #2 }
      { \zutil_debug:N #2 }
  }

\iffalse
  \ZutilDebug {<text> | \<command>}
  \ZutilDebug [<label> | <kv-list>] {<text> | \<command>}

  <kv-list>
    label = <label> : tl
    cell-label = true | false
    if = <bool expr> : tl
    expand = true | false
    csname = true | false
\fi