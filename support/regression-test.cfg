\ExplSyntaxOn

%%
%% hacks to get an engine-neutral error-like message type
%%

% define new message level "errorx"
% It works like "info" but uses "Package ... Error" header.
\cs_new_protected:Npn \__msg_errorx_code:nnnnnn #1#2#3#4#5#6
  {
    \socket_use:n { test/error-count }
    \__msg_info_aux:NNnnnnnn \iow_term:n \msg_errorx_text:n
      {#1} {#2} {#3} {#4} {#5} {#6}
  }

\prop_new:N \l__msg_redirect_errorx_prop

\cs_new:Npn \msg_errorx_text:n { !~\msg_error_text:n }

%%
%% hacks to count number of errors
%%

\int_new:N \g__test_error_cnt_int

% socket practice
\socket_new:nn { test/error-count } { 0 }
\socket_new_plug:nnn { test/error-count } { normal }
  {
    \int_gincr:N \g__test_error_cnt_int
  }
\socket_assign_plug:nn { test/error-count } { normal }

\cs_new_eq:NN \__test_errmessage_orig:w \errmessage
% #1 curried
\cs_new_protected:Npn \__test_errmessage_new:w
  {
    \socket_use:n { test/error-count }
    \__test_errmessage_orig:w
  }
\cs_gset_eq:NN \errmessage       \__test_errmessage_new:w
\cs_gset_eq:NN \tex_errmessage:D \__test_errmessage_new:w

\cs_new_protected:Npn \test_log_error_count:nn #1#2
  {
    \iow_term:e
      {
        [test]~ \int_eval:n {#1} ~error(s)~encountered #2.
      }
  }
\cs_new_protected:Npn \test_log_error_count:
  {
    \test_log_error_count:nn { \g__test_error_cnt_int } {}
  }

% end-of-file logging
\hook_new:n { test/error-count/eof }
\hook_gput_code:nnn { test/error-count/eof } { . }
  {
    % \OMIT ... \TIMO are not nestable, so unpaired \TIMO is valid use.
    \TIMO
    % emulate output of l3build "recordstatus = true"
    \iow_term:n { *************** }
    \test_log_error_count:
  }

% Log lines written in \@@@end used in \END are always ignored, because
% \@@@end is called after "END-TEST-LOG" is written, thus we cannot
% patch the dynamically used \@@@end, but only the statically-\let \END.
%
% Cmd hooks (i.e. "cmd/END/before") are not useable here. Real patchings
% for the cmd hooks used in the preamble are delayed to \begin{document},
% more precisely in \@kernel@after@begindocument, which is used right
% after the begindocument hook.
\cs_new_eq:NN \test_END_orig: \END
\cs_gset_protected:Npn \END
  {
    \hook_use:n { test/error-count/eof }
    \test_END_orig:
  }

% update \END aliases, copied from regression-test.tex
% \end{document} calls \@@end thus is covered
\ifx\@@end\@undefined
  \let\end\END
\else
  \let\@@end\END
\fi

%% TODO: following works for fatal errors, but not for critical errors
%%       as the latter call \tex_endinput:D.

% % fatal errors "force a bail out" immediately, without calling \END,
% % thus need to be patched too
% \cs_new_eq:NN \test__msg_fatal_exit: \__msg_fatal_exit:
% \cs_gset_protected:Npn \__msg_fatal_exit:
%   {
%     \test_log_error_count_at_end:
%     \__msg_fatal_exit:
%   }

% end-of-test logging
\hook_new_pair:nn { test/error-count/before } { test/error-count/after }
\hook_gput_code:nnn { test/error-count/before } { . }
  {
    \int_gset_eq:NN \g__test_error_tmp_int \g__test_error_cnt_int
  }
\hook_gput_code:nnn { test/error-count/after } { . }
  {
    \int_compare:nNnF \g__test_error_cnt_int = \g__test_error_tmp_int
      {
        \test_log_error_count:nn
          { \g__test_error_cnt_int - \g__test_error_tmp_int }
          { ~in~this~test }
      }
  }

% \TEST and \TESTEXP are both based on \BEGINTEST...\ENDTEST
\int_new:N \g__test_error_tmp_int

% in regression-test.tex, \BEGINTEST and friends are defined after
% loading regression-test.cfg
\hook_gput_code:nnn { file/regression-test.tex/after } { test }
  {
    \cs_new_eq:NN \test_BEGINTEST_orig:w \BEGINTEST
    \cs_gset_protected:Npn \BEGINTEST
      {
        \hook_use:n { test/error-count/before }
        \test_BEGINTEST_orig:w
      }
    % lucky, unlike \BEGINTEST, \ENDTEST has only one version;
    % simple wrapping cannot insert code in the middle
    \cs_new_protected:Npn \test_ENDTEST_orig:
      {
        \endgroup
        \SEPARATOR
        \LONGTYPEOUT{}%
      }
    \cs_new_protected:Npn \test_ENDTEST_new:
      {
        \endgroup
        \hook_use:n { test/error-count/after }
        \SEPARATOR
        \LONGTYPEOUT{}%
      }
    \cs_if_eq:NNTF \test_ENDTEST_orig: \ENDTEST
      {
        \cs_gset_eq:NN \ENDTEST \test_ENDTEST_new:
      }
      {
        \iow_term:n {!!!~Definition~of~\ENDTEST changed~!!!}
        % like a fatal error
        \END
      }
  }

% suspend and resume, similar to \debug_suspend: and \debug_resume:
\cs_new_protected:Npn \test_suspend_error_count:
  {
    \socket_assign_plug:nn { test/error-count } { noop }
  }
\cs_new_protected:Npn \test_resume_error_count:
  {
    \socket_assign_plug:nn { test/error-count } { normal }
  }

%%
%% end of hacks
%%

% redirect error modules used in this repo
\msg_redirect_module:nnn { zutil }      { error } { errorx }
\msg_redirect_module:nnn { tabularray } { error } { errorx }

% it's recommended to load l3backend-<engine>.def as early as possible
\sys_ensure_backend:

% enable first use of \debug_on:n after preamble
% see https://github.com/latex3/latex3/issues/1442
\hook_gput_code:nnn { begindocument } { test }
  { \sys_load_debug: }

% trigger font info lines
\setbox0=\hbox{$a$}

\ExplSyntaxOff
