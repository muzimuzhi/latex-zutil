\ExplSyntaxOn % it ensures/checks that \detokenize exists


%%
%% load and setup zutil
%%

% in case loading of zutil and its modules is delayed, e.g. in test zutil-001
% File hooks are not one-time, so modify them before files are loaded
\hook_gput_code:nnn { file/zutil-l3extras.code.tex/after } { test }
  {
    \zutil_msg_suspend_debug:
  }

\hook_gput_code:nnn { file/zutil-softerror.code.tex/after } { test }
  {
    % redirect error messages tested in this repo to softerror
    \msg_redirect_module:nnn { zutil }      { error } { softerror }
    \msg_redirect_module:nnn { tabularray } { error } { softerror }
    % hook into softerror messages to count errors
    \cs_new_eq:NN
      \__test_msg_softerror_code_orig:nnnnnn \__msg_softerror_code:nnnnnn
    % #1 to #6 are curried
    \cs_gset_protected:Npn \__msg_softerror_code:nnnnnn
      {
        \__test_count_errors:
        \__test_msg_softerror_code_orig:nnnnnn
      }
  }

\RequirePackage [ presets=test ] { zutil }

%%
%% suspend debugging inside \msg_<type>:nn... functions
%%

\IfPackageLoadedT { zutil }
  {
    % in case loading of zutil is disabled by special tests, e.g. zutil-001.lvt
    \zutil_load_module:n { l3extras }
    \zutil_msg_suspend_debug:
  }

%%
%% hacks for end-of-test and end-of-file logging
%%

% end-of-file logging

\hook_new:n { test/enddocument }

% As \@@@end is used after "END-TEST-LOG" is written (in \END), it's
% too late to patch dynamically-used \@@@end to log error count. Thus
% we have to patch \END and other commands which are \let to \END.
%
% Cmd hooks (i.e. "cmd/END/before") used in preamble only take effect
% _after_ begindocument, thus are not useable here. More precisely the
% real patchings happen in \@kernel@after@begindocument, used right
% after the begindocument hook).
\cs_new_eq:NN \__test_END_orig: \END
\cs_gset_protected:Npn \END
  {
    \hook_use:n { test/enddocument }
    \__test_END_orig:
  }

% update \END aliases, copied from regression-test.tex
% \end{document} calls \@@end thus is covered
\ifx\@@end\@undefined
  \let\end\END
\else
  \let\@@end\END
\fi

%% TODO: following works for fatal errors, but not for critical errors
%%       as the latter call \tex_endinput:D.

% % fatal errors "force a bail out" immediately, without calling \END,
% % thus need to be patched too
% \cs_new_eq:NN \__test__msg_fatal_exit: \__msg_fatal_exit:
% \cs_gset_protected:Npn \__msg_fatal_exit:
%   {
%     \__test_log_error_count_at_end:
%     \__msg_fatal_exit:
%   }

% end-of-test logging
\hook_new_pair:nn { test/TEST/begin } { test/TEST/end }

% \TEST and \TESTEXP are both based on \BEGINTEST...\ENDTEST
%
% in regression-test.tex, \BEGINTEST and friends are defined _after_
% loading regression-test.cfg
\hook_gput_code:nnn { file/regression-test.tex/after } { test }
  { \test_patch: }

\msg_new:nnn { test } { not-patchable }
  { #1 is~not~patchable.~Maybe~its~original~definition~has~changed? }

\cs_new_protected:Npn \test_patch:
  {
    \cs_if_eq:NNTF \test_BEGINTEST_orig:w \BEGINTEST
      { \cs_gset_eq:NN \BEGINTEST \test_BEGINTEST_new:w }
      {
        \START
        \msg_error:nn { test } { not-patchable } { \BEGINTEST }
        % halt the TeX run
        \END
      }
    \cs_if_eq:NNTF \test_ENDTEST_orig:w \ENDTEST
      { \cs_gset_eq:NN \ENDTEST \test_ENDTEST_new:w }
      {
        \START
        \msg_error:nn { test } { not-patchable } { \ENDTEST }
        % halt the TeX run
        \END
      }
    \cs_if_eq:NNTF \test_TESTEXP_orig:w \TESTEXP
      { \cs_gset_eq:NN \TESTEXP \test_TESTEXP_new:w }
      {
        \START
        \msg_error:nn { test } { not-patchable } { \TESTEXP }
        % halt the TeX run
        \END
      }
  }

% keep the original code format in regression-test.tex as far as possible
\ExplSyntaxOff
\csname protected\endcsname\long\expandafter\def
    \csname test_BEGINTEST_orig:w\endcsname #1{%
  \global\advance\gTESTint by 1 %
  \SEPARATOR
  \LONGTYPEOUT{TEST \the\gTESTint : \detokenize{#1}}%
  \SEPARATOR
  \begingroup
    \let\TYPE\LONGTYPEOUT
}
\csname protected\endcsname\long\expandafter\def
    \csname test_ENDTEST_orig:w\endcsname{%
  \endgroup
  \SEPARATOR
  \LONGTYPEOUT{}%
}

\long\expandafter\def\csname test_TESTEXP_orig:w\endcsname#1#2{%
  \BEGINTEST{#1}%
  \LONGTYPEOUT{#2}%
  \ENDTEST
}
\ExplSyntaxOn

% removed \the\gTESTint from title (still stepped), added hooks
\cs_new_protected:Npn \test_BEGINTEST_new:w #1
  {
    \global\advance\gTESTint by 1 %
    \SEPARATOR
    \LONGTYPEOUT{TEST:~\detokenize{#1}}% noqa: s204
    \SEPARATOR
    \begingroup
      \hook_use:n { test/TEST/begin }
      \let\TYPE\LONGTYPEOUT
  }
\cs_new_protected:Npn \test_ENDTEST_new:w
  {
      \hook_use:n { test/TEST/end }
    \endgroup
    \SEPARATOR
    \LONGTYPEOUT{}% noqa: s204
  }

% to support use of local-scope \flag_raise:N in test body, expand the body
% before passing it to \LONGTYPEOUT. The latter uses its argument in an extra
% group.
\cs_new_protected:Npn \test_TESTEXP_new:w #1#2
  {
    \BEGINTEST{#1}% noqa: s204
    \cs_set_eq:NN \TYPE \use:n
    % expands to \LONGTYPEOUT { \exp_not:n {<values of #2>} }
    \exp_args:Ne \LONGTYPEOUT { \exp_not:N \exp_not:n {#2} }
    \cs_set_eq:NN \TYPE \test_TYPE_orig:w
    \ENDTEST
  }
\cs_set_eq:NN \test_TYPE_orig:w \TYPE

%%
%% hacks for counting number of \PASSED used per test
%%

\flag_new:N \l__test_passed_cnt_flag

\msg_new:nnn { test } { invalid-group-level }
  {
    \exp_not:N \PASSED must~be~used~in~group~level~1.~
    Current~\int_use:N \currentgrouplevel.
  }

\cs_new:Npn \PASSED
  {
    \if_int_compare:w \currentgrouplevel > 1 \exp_stop_f:
      \msg_expandable_error:nn { test } { invalid-group-level }
    \else:
      \flag_raise:N \l__test_passed_cnt_flag
    \fi:
  }
\cs_undefine:N \FAILED

\cs_new_protected:Npn \test_log_passed_count:n #1
  {
    \iow_log:e { [test]~ \int_eval:n {#1} ~tests~passed. }
  }

\hook_gput_code:nnn { test/TEST/begin } { . }
  {
    \flag_if_raised:NT \l__test_passed_cnt_flag
      {
        \msg_expandable_error:nn { test } { invalid-group-level }
        \flag_clear:N \l__test_passed_cnt_flag
      }
  }
\hook_gput_code:nnn { test/TEST/end } { . }
  {
    \flag_if_raised:NT \l__test_passed_cnt_flag
      {
        \test_log_passed_count:n
          { \flag_height:N \l__test_passed_cnt_flag }
        \flag_clear:N \l__test_passed_cnt_flag
      }
  }

%%
%% hacks for counting number of errors
%%

% The aim here is to be aware of \errmessage errors thrown even within
% \OMIT ... \TIMO, and provide a more readable view for log-based tests
% which are expected to be error-rich.
%
% Expandable errors (by using \msg_expandable_error:nn and friends) are
% only accounted if thrown in top-levels of a test file or a test.
%
% Engine errors like "! Undefined control sequence" are NOT patchable,
% thus not credited.
%
% The l3build config variable "recordstatus = true" records exit code(s)
% of _all_ check runs, thus is more time consuming.
% https://github.com/latex3/l3build/issues/398

% end-of-test logging, if this test throws error(s) [n >= 1]
%     [test] <n> error(s) encountered in this test.
% end-of-file logging [n >= 0]
%     ***************
%     [test] <n> error(s) encountered.

\int_new:N \g__test_error_cnt_int
\int_new:N \g__test_error_tmp_int
\flag_new:N \l__test_expandable_errors_flag

% socket practice
\socket_new:nn { test/count-error } { 0 }
\socket_new_plug:nnn { test/count-error } { normal }
  {
    \int_gincr:N \g__test_error_cnt_int
  }
\socket_assign_plug:nn { test/count-error } { normal }

\socket_new:nn { test/count-exp-error } { 0 }
\socket_new_plug:nnn { test/count-exp-error } { normal }
  {
    \flag_raise:N \l__test_expandable_errors_flag
  }
\socket_assign_plug:nn { test/count-exp-error } { normal }

% use socket in softerror messages
\cs_gset_protected:Npn \__test_count_errors:
  {
    \socket_use:n { test/count-error }
  }

% wrap \errmessage
\cs_new_eq:NN \__test_errmessage_orig:w \errmessage
% #1 curried
\cs_new_protected:Npn \__test_errmessage_new:w
  {
    \__test_count_errors:
    \__test_errmessage_orig:w
  }
\cs_gset_eq:NN \errmessage       \__test_errmessage_new:w
\cs_gset_eq:NN \tex_errmessage:D \__test_errmessage_new:w % noqa: w200

% wrap \msg_expandable_error:nn and friends, in an expandable way
\cs_new_eq:NN \__test_msg_expandable_error_orig:nn
              \__msg_expandable_error:nn
% #1 and #2 curried
\cs_gset:Npn \__msg_expandable_error:nn
  {
    \socket_use_expandable:n { test/count-exp-error }
    \__test_msg_expandable_error_orig:nn
  }

\cs_new:Npn \test_clear_expandable_errors_cnt:
  {
    \flag_clear:N \l__test_expandable_errors_flag
  }
\cs_new_protected:Npn \test_add_expandable_errors_cnt:
  {
    \int_gadd:Nn \g__test_error_cnt_int
      { \flag_height:N \l__test_expandable_errors_flag }
  }

% logging
\cs_new_protected:Npn \test_log_error_count:nn #1#2
  {
    \iow_term:e
      {
        [test]~ \int_eval:n {#1} ~error(s)~encountered #2.
      }
  }

% logging
\hook_gput_code:nnn { test/enddocument } { . }
  {
    % \OMIT ... \TIMO are not nestable, so unpaired \TIMO is valid use.
    \TIMO
    % emulate output of l3build "recordstatus = true"
    \iow_term:n { *************** }
    \test_add_expandable_errors_cnt:
    \test_log_error_count:nn { \g__test_error_cnt_int } {}
  }

\hook_gput_code:nnn { test/TEST/begin } { . }
  {
    \test_clear_expandable_errors_cnt:
    \int_gset_eq:NN \g__test_error_tmp_int \g__test_error_cnt_int
  }
\hook_gput_code:nnn { test/TEST/end } { . }
  {
    \test_add_expandable_errors_cnt:
    \int_compare:nNnF \g__test_error_cnt_int = \g__test_error_tmp_int
      {
        \test_log_error_count:nn
          { \g__test_error_cnt_int - \g__test_error_tmp_int }
          { ~in~this~test }
      }
  }

% suspend and resume error counting
% similar to \debug_suspend: and \debug_resume:
\cs_new_protected:Npn \test_suspend_error_count:
  {
    \socket_assign_plug:nn { test/count-error } { noop }
    \socket_assign_plug:nn { test/count-exp-error } { noop }
  }
\cs_new_protected:Npn \test_resume_error_count:
  {
    \socket_assign_plug:nn { test/count-error } { normal }
    \socket_assign_plug:nn { test/count-exp-error } { normal }
  }

%%
%% end of hacks
%%

% it's recommended to load l3backend-<engine>.def as early as possible
\sys_ensure_backend:

% enable uses of \debug_(on|off):n after preamble
% see https://github.com/latex3/latex3/issues/1442
\hook_gput_code:nnn { begindocument } { test }
  { \sys_load_debug: }

\ExplSyntaxOff

% set engine-neutral fonts and font encoding
%
% Initially inspired by https://github.com/gusbrs/zref-clever test files which set
%     \usepackage[OT1]{fontenc}
%     \renewcommand\rmdefault{cmr}
%     \renewcommand\sfdefault{cmss}
%     \renewcommand\ttdefault{cmtt}
% But math fonts are not covered.
%
% "T1" is the new default font encoding when \DocumentMetadata is used
% see ltnews 40 for LaTeX release 2024-11-01
\RequirePackage[T1]{fontenc}
\RequirePackage{lmodern}

% trigger font info lines
\setbox0=\hbox{$a$}
