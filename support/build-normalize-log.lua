-- custom log normalization
local open             = io.open
local close            = io.close
local write            = io.write
local output           = io.output

local gsub             = string.gsub
local gmatch           = string.gmatch
local match            = string.match

local function rewrite_extra(source,result,processor,...)
  -- load the result file created by the original rewrite_log_old()
  local file = assert(open(result,"rb"))
  local content = gsub(file:read("a") .. "\n","\r\n","\n")
  close(file)
  local new_content
  new_content = processor(content,...)
  local newfile = assert(open(result,"w"))
  output(newfile)
  write(new_content)
  close(newfile)
end

local function normalize_log_extra(content, engine, errlevels)
  local function normalize(line)
    line = gsub(line, "^Type  H <return>  for immediate help.*", "")
    line = gsub(line, "^For immediate help type H <return>.*", "")
    line = gsub(line, "^Type <return> to continue.*", "")
    line = gsub(line, "^ %->\\errmessage  .*", " ...")
    line = gsub(line, "^ %->\\tex_errmessage:D  .*", " ...")
    line = gsub(line, "^See the .* package documentation for explanation%.$", "")
    line = gsub(line, "^See the .* class documentation for explanation%.$", "")
    line = gsub(line, "^See the LaTeX manual or LaTeX Companion for explanation%.$", "")
    return line
  end

  local skipping_lines = 0
  local new_content = ""
  for line in gmatch(content, "([^\n]*)\n") do
    if skipping_lines > 0 then
      skipping_lines = skipping_lines - 1
      goto continue
    end
    if match(line, "^If you say, e%.g%., `\\def\\a1{%.%.%.}', then you must always$") or
        match(line, "^This error message was generated by an \\errmessage$") then
      skipping_lines = 3
      goto continue
    end
    -- skip non-empty lines produced by \c__msg_no_info_text_tl
    if match(line, "^LaTeX does not know anything more about this error, sorry%.$") then
      skipping_lines = 2
      goto continue
    end
    line = normalize(line)
    if line ~= "" then
      new_content = new_content .. line .. "\n"
    end
    ::continue::
  end
  return new_content
end

local rewrite_log_old = rewrite_log
function rewrite_log(source, result, engine, errlevels)
  rewrite_log_old(source, result, engine, errlevels)
  rewrite_extra(source, result, normalize_log_extra, engine, errlevels)
end
